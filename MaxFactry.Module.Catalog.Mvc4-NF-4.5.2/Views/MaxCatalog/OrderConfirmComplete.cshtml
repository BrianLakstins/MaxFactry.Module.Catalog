@model MaxFactry.Module.Catalog.PresentationLayer.MaxOrderViewModel
@{
    string lsContinueShoppingLink = "/";
    string lsStorageKey = MaxFactry.Base.DataLayer.MaxDataLibrary.GetStorageKey(null);
    if (lsStorageKey == "037a5df8-9d2c-4d9b-ac57-b3a27490a794")
    {
        lsContinueShoppingLink = "https://tractortoolsdirect.com/showroom/";
    }   
}

@if (User.IsInRole("Admin - App"))
{
    <div class="row">
        <div class="col-sm-12">
            <p class="bg-info text-center">Logged in as Admin user @User.Identity.Name</p>
        </div>
    </div>
}

<div class="row">
    <div class="col-sm-12">
        <h3 class="text-center">Order Confirmed!</h3>
        <p class="bg-success text-center lead">Your Order number is @Model.AlternateId</p>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        Thank you for your order!  You should receive an order confirmation email shortly.
    </div>
    <div class="col-sm-12">
        <div>Please share this site with your friends and followers!</div>
        <div class="addthis_sharing_toolbox" data-url="@Html.Raw("https://" + Request.Url.DnsSafeHost + "/")"></div>
    </div>
    <div class="col-sm-6">
        <a class="btn btn-success btn-large" href="@lsContinueShoppingLink" target="_top">Continue Shopping</a>
    </div>
    <div class="col-sm-6 text-right">
        <a class="btn btn-default btn-large" href="javascript:window.print();">Print this page</a>
    </div>
</div>
<div class="row">
    @Html.DisplayFor(m => m)
</div>
@using (Html.BeginForm("OrderConfirmComplete", "MaxCatalog", FormMethod.Post, htmlAttributes: new { Class = "form-horizontal" }))
{
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <fieldset name="uoContactInformation">
            <legend>Order Contact Information</legend>
            @Html.DisplayFor(m => m.OrderContactPerson)
            @Html.DisplayFor(m => m.OrderContactAddress)
        </fieldset>

        <fieldset name="uoShippingInformation">
            <legend>Shipping Information</legend>
            @Html.DisplayFor(m => m.OrderShippingInfo)
        </fieldset>

        <fieldset name="uoPaymentInformation">
            <legend>Payment Information</legend>
            @for (int lnM = 0; lnM < Model.OrderPaymentList.Count; lnM++)
            {
                if (Model.OrderPaymentList[lnM].IsSelected == "true" || Model.OrderPaymentList.Count == 1)
                {
                    if (Model.OrderPaymentList[lnM].OrderPaymentDetail.DetailType == MaxFactry.Module.Catalog.BusinessLayer.MaxOrderPaymentDetailEntity.PaymentDetailTypeCard)
                    {
                        <div>Credit Card</div>
                    }
                    else if (Model.OrderPaymentList[lnM].OrderPaymentDetail.DetailType == MaxFactry.Module.Catalog.BusinessLayer.MaxOrderPaymentDetailEntity.PaymentDetailTypeGeneral)
                    {
                        <div>General Payment</div>
                    }
                    
                    @Html.DisplayFor(m => m.OrderPaymentList[lnM])
                }
            }
        </fieldset>
    </div>
</div>
}

@section ScriptSection {
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=brianlakstins" async="async"></script>
    <script type="text/javascript">
        ga('require', 'ecommerce');
        
        ga('ecommerce:addTransaction', {
            'id': '@Model.AlternateId',                     // Transaction ID. Required.
            'affiliation': '@MaxFactry.Module.Catalog.PresentationLayer.MaxCatalogViewModel.Current.Name',   // Affiliation or store name.
            'revenue': '@Model.Total',               // Grand Total.
            'shipping': '@Model.ShippingTotal',                  // Shipping.
            'tax': '@Model.TaxTotal'                     // Tax.
        });

        @foreach (var loItem in Model.ItemList)
        {
        <text>
            ga('ecommerce:addItem', {
                'id': '@Model.AlternateId',                     // Transaction ID. Required.
                'name': '@loItem.Name',    // Product name. Required.
                'sku': '@loItem.Sku',                 // SKU/code.
                'category': '',         // Category or variation.
                'price': '@loItem.ItemPrice',                 // Unit price.
                'quantity': '@loItem.Quantity'                   // Quantity.
            });
        </text>
        }

        ga('ecommerce:send');
    </script>
}
@section StyleSection {
    <style>
        .form-inline .form-group {
            margin-left: 0;
            margin-right: 0;
        }
    </style>

    <style type="text/css">
        #udOrder {
            padding-bottom: 30px;
        }

            #udOrder .ussName {
                padding-bottom: 5px;
                font-weight: bold;
                font-size: 110%;
            }

            #udOrder .ussLabel {
                font-weight: bold;
                padding-right: 10px;
            }

            #udOrder .ussQuantity {
                width: 50px;
            }

            #udOrder .ussItemDivider {
                margin-top: 2px;
                margin-bottom: 2px;
            }

            #udOrder .ussItemPriceLabel {
                padding-right: 10px;
            }

            #udOrder .ussItemImage {
                width: 62px;
            }

            #udOrder .ussSku {
                margin-right: 10px;
            }

            #udOrder .ussOption {
                margin-right: 10px;
            }
    </style>
}
